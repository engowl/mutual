// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(cuid())
  email String? @unique
  name  String?

  portalClientId     String?
  portalClientApiKey String?

  role UserRole?

  wallet UserWallet?

  projectOwner ProjectOwner?
  influencer   Influencer?

  messagesSent  UserMessage?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  PROJECT_OWNER
  INFLUENCER
}

model UserWallet {
  id String @id @default(cuid())

  type    UserWalletType @default(MPC)
  address String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  amount Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectOwner {
  id             String           @id @default(cuid())
  userId         String           @unique
  user           User             @relation(fields: [userId], references: [id])
  telegramAdmin  String
  projectDetails ProjectDetails[]

  status ProjectOwnerStatus @default(PENDING)
}

model ProjectDetails {
  id                String       @id @default(cuid())
  projectName       String
  contractAddress   String
  twitterLink       String
  telegramGroupLink String
  marketCap         Float?
  age               Int?
  holders           Int?
  projectOwnerId    String       @unique
  projectOwner      ProjectOwner @relation(fields: [projectOwnerId], references: [id])
}

// Influencer (KOL) Model
model Influencer {
  id               Int               @id @default(autoincrement())
  user             User              @relation(fields: [userId], references: [id])
  userId           String            @unique
  twitterLink      String
  telegramUsername String
  projectCriteria  ProjectCriteria[]
  offers           Offer[]
}

// Project Criteria for Influencers (KOL)
model ProjectCriteria {
  id                Int        @id @default(autoincrement())
  influencer        Influencer @relation(fields: [influencerId], references: [id])
  influencerId      Int
  minMarketCap      Float
  maxMarketCap      Float
  minAge            Int
  maxAge            Int
  min24hVolume      Float
  minTokenHolders   Int
  liquidityRequired Float
}

model Offer {
  id                Int        @id @default(autoincrement())
  influencer        Influencer @relation(fields: [influencerId], references: [id])
  influencerId      Int
  tweetPrice        Float
  telegramPostPrice Float
}

enum UserWalletType {
  MPC
  EOA
}

enum ProjectOwnerStatus {
  PENDING
  APPROVED
}


model UserMessage {
  id         String      @id @default(cuid())

  status     UserOnlineStatus @default(OFFLINE)

  userId     String      @unique
  user       User        @relation(fields: [userId], references: [id])

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserOnlineStatus {
  ONLINE
  OFFLINE
}
  
model Message {
  id         Int      @id @default(autoincrement())
  content    String
  sentAt     DateTime @default(now())
  senderTimezone String
  sender     UserMessage     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   UserMessage     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}