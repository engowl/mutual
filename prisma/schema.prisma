// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String  @id @default(cuid())
  email String? @unique
  name  String?

  portalClientId     String?
  portalClientApiKey String?

  role UserRole?

  wallet UserWallet?

  projectOwner ProjectOwner?
  influencer   Influencer?

  messagesSent  UserMessage?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  PROJECT_OWNER
  INFLUENCER
}

model UserWallet {
  id String @id @default(cuid())

  type    UserWalletType @default(MPC)
  address String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  amount Float

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProjectOwner {
  id             String           @id @default(cuid())
  userId         String           @unique
  user           User             @relation(fields: [userId], references: [id])
  telegramAdmin  String?
  projectDetails ProjectDetails[]

  status ProjectOwnerStatus?
}

model ProjectDetails {
  id                String  @id @default(cuid())
  projectName       String?
  contractAddress   String?
  telegramGroupLink String?
  marketCap         Float?
  age               Int?
  holders           Int?

  projectOwnerId String       @unique
  projectOwner   ProjectOwner @relation(fields: [projectOwnerId], references: [id])

  twitterAccountId String?
  twitterAccount   TwitterAccount? @relation(fields: [twitterAccountId], references: [id])
}

// Influencer (KOL) Model
model Influencer {
  id               String            @id @default(cuid())
  user             User              @relation(fields: [userId], references: [id])
  userId           String            @unique
  telegramLink     String?
  projectCriterias ProjectCriteria[]
  packages         Package[]

  twitterAccountId String?
  twitterAccount   TwitterAccount? @relation(fields: [twitterAccountId], references: [id])

  orders CampaignOrder[]
}

// Project Criteria for Influencers (KOL)
model ProjectCriteria {
  id             String             @id @default(cuid())
  influencer     Influencer         @relation(fields: [influencerId], references: [id])
  influencerId   String
  riskPreference RiskPreferenceEnum
  tokenAge       TokenAgeEnum
  minMarketCap   Float
  maxMarketCap   Float
  min24hVolume   Float
  tokenHolder    Int
  liquiditySize  Float
}

model Package {
  id           String       @id @default(cuid())
  influencer   Influencer   @relation(fields: [influencerId], references: [id])
  influencerId String
  type         PostTypeEnum
  price        Float
  description  String       @db.Text
}

model TwitterAccount {
  id             String           @id @default(cuid())
  accountId      String
  name           String
  username       String
  unfluencer     Influencer[]
  projectDetails ProjectDetails[]
}

enum UserWalletType {
  MPC
  EOA
}

// Campaign Order
enum CampaignChannel {
  TWITTER
  TELEGRAM
}

enum CampaignOrderVestingType {
  TIME
  MARKETCAP
  NONE
}

enum CampaignOrderStatus {
  CREATED
  ACCEPTED
  REJECTED
  PARTIALCOMPLETED
  COMPLETED
  DISPUTED
  RESOLVED
}

enum CampaignOrderEligibilityStatus {
  NOTELIGIBLE
  PARTIALLYELIGIBLE
  FULLYELIGIBLE
}

enum CHAIN {
  MAINNET_BETA
  DEVNET
  LOCALNET
}

model Token {
  id String @id @default(cuid())

  mintAddress String
  chainId     CHAIN

  name        String
  symbol      String
  decimals    Int
  totalSupply Float
  imageUrl    String?
  description String?
  uriData     Json?

  orders CampaignOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([mintAddress, chainId])
}

// model Pair {

// }

model CampaignOrder {
  id String @id

  influencerId Int
  influencer   Influencer @relation(fields: [influencerId], references: [id], onDelete: Cascade)

  // TODO: token mint
  tokenId String
  token    Token  @relation(fields: [tokenId], references: [id], onDelete: Cascade)

  tokenAmount Float

  channel     CampaignChannel

  vestingType CampaignOrderVestingType
  vestingCondition Json
  status      CampaignOrderStatus @default(CREATED)
  eligibility CampaignOrderEligibilityStatus @default(NOTELIGIBLE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EscrowEventLog {
  id String @id @default(cuid())
  chainId         CHAIN
  programId       String

  campaignOrderId String
  eventName       String
  signature       String
  data            Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProjectOwnerStatus {
  PENDING
  APPROVED
}


model UserMessage {
  id         String      @id @default(cuid())

  status     UserOnlineStatus @default(OFFLINE)

  userId     String      @unique
  user       User        @relation(fields: [userId], references: [id])

  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserOnlineStatus {
  ONLINE
  OFFLINE
}
  
model Message {
  id         Int      @id @default(autoincrement())
  content    String
  sentAt     DateTime @default(now())
  senderTimezone String
  sender     UserMessage     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   UserMessage     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
enum RiskPreferenceEnum {
  LOW
  MODERATE
  HIGH
  CUSTOM
}

enum TokenAgeEnum {
  LESS_THAN_SEVEN_WEEKS
  ONE_TO_FOUR_WEEKS
  ONE_TO_THREEE_MONTHS
  MORE_THAN_THREE_MONTHS
}

enum PostTypeEnum {
  TWITTER
  TELEGRAM_GROUP
}
